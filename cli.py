#!/usr/bin/env python3
import argparse
import psycopg2
import json
import sys
from info_about_query import analyze_query, pretty_plan, full_pg_analysis
from rec_db import health_check
from rec_query import recommend_indexes


def connect_db(dsn):
    try:
        conn = psycopg2.connect(dsn)
        conn.autocommit = True
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)

def check_pg_stat_statements_enabled(conn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ pg_stat_statements –≤ —Ç–µ–∫—É—â–µ–π –ë–î"""
    with conn.cursor() as cur:
        try:
            cur.execute("SELECT extname FROM pg_extension WHERE extname='pg_stat_statements'")
            if cur.fetchone():
                return True
            return False
        except Exception:
            return False


def main():
    parser = argparse.ArgumentParser(description="PostgreSQL Query & DB Analyzer")
    parser.add_argument("--dsn", type=str, required=True,
                        help="DSN –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, –ø—Ä–∏–º–µ—Ä: 'host=localhost dbname=test user=postgres password=123'")
    parser.add_argument("--query", type=str, help="SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--file", type=str, help="SQL-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--analyze-db", action="store_true", help="–ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î –∏ bloating")
    parser.add_argument("--pgstat", action="store_true", help="–ê–Ω–∞–ª–∏–∑ pg_stat_statements (—Ç–æ–ø-10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)")
    args = parser.parse_args()

    conn = connect_db(args.dsn)

    if args.analyze_db:
        print("\n –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ë–î:")
        health_check(conn)

    if args.query or args.file:
        query = args.query
        if args.file:
            with open(args.file, "r") as f:
                query = f.read()

        print("\n –ü–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (EXPLAIN):")
        plan = analyze_query(conn, query)
        pretty_plan(plan)

        print("\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º:")
        recs = recommend_indexes(conn, query)
        if recs:
            for r in recs:
                print(f"   ‚ö†Ô∏è {r}")
        else:
            print("   –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    if args.pgstat:
        stats = full_pg_analysis(conn)

        print("\nüìà –ê–Ω–∞–ª–∏–∑ pg_stat_statements:")

        print("\nüî• –¢–æ–ø –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
        for q in stats["detailed_queries"]:
            print(f"  ‚Ä¢ {q['query'][:80]}...")
            print(f"    ‚è± –≤—ã–∑–æ–≤—ã: {q['calls']}, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {q['mean_exec_time_ms']} –º—Å, "
                f"—Å—Ç—Ä–æ–∫: {q['rows']}, hit-rate: {q['blks_hit']}/{q['blks_read']}")
            if q["recommendations"]:
                for rec in q["recommendations"]:
                    print(f"    ‚ö†Ô∏è {rec}")

        print("\nüê¢ –ü–æ–¥–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ N+1:")
        for q in stats["n_plus_one_suspects"]:
            print(f"  ‚Ä¢ {q['query'][:80]}...")
            print(f"    {q['recommendation']}")




if __name__ == "__main__":
    main()
